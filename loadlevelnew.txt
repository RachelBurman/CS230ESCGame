LEVELLOAD, MAP, TELEPORTER and GAME in that order with attempt on new level loader which is cleaner

package application;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import moving.*;

public class LevelLoaderBetter {

	/*
	 * TextFile Structure
	 * First 2 Lines is size of map
	 * Second 2 is Player start location
	 * third 3 StraightLineEnemy location followed by 1,2,3,4 as up,down,right,left
	 * teleporter next
	 */
	
	public static Map loadLevel(String file) {
		
		try {
			File f = new File(file);
			Scanner in = new Scanner(f);
			
			
			//map size
			int[] size = new int[2];
			int x = in.nextInt();
			int y = in.nextInt();
			size[0] = x;
			size[1] = y;
			
			//player location
			int[] start = new int[2];
			int xPlayer = in.nextInt();
			int yPlayer = in.nextInt();
			start[0] = xPlayer;
			start[1] = yPlayer;
			
			//level map
			Cell[][] level = new Cell[x][y];
			for (int newY = 0; newY < y; newY++) {
				String s = in.nextLine();
				//System.out.println(s);
				for (int newX = 0; newX < x; newX++) {
					if (s.charAt(newX) == '#') {
						level[newX][newY] = new Wall("wall", newX, newY);
					} else if (s.charAt(newX) == 'G') {
						level[newX][newY] = new Goal("goal", newX, newY);
					} else if (s.charAt(newX) == 'W') {
						level[newX][newY] = new Water("water", newX, newY);
					} else if (s.charAt(newX) == 'F') {
						level[newX][newY] = new Fire("fire", newX, newY);
					} else if (s.charAt(newX) == 'R') {
						level[newX][newY] = new Door("red door", newX, newY);
					} else if (s.charAt(newX) == 'B') {
						level[newX][newY] = new Door("blue door",newX, newY);
					} else if (s.charAt(newX) == 'D') {
						level[newX][newY] = new Door("green door", newX, newY);
					} else if (s.charAt(newX) == 'A') {
						level[newX][newY] = new Key("red", newX, newY);
					} else if (s.charAt(newX) == 'C') {
						level[newX][newY] = new Key("blue", newX, newY);
					} else if (s.charAt(newX) == 'E') {
						level[newX][newY] = new Key("green", newX, newY);
					}  else if (s.charAt(newX) == 'H') {
						level[newX][newY] = new Boot("boots", newX, newY);
					} else if (s.charAt(newX) == 'I') {
						level[newX][newY] = new Flipper("flippers", newX, newY);
					} else if (s.charAt(newX) == 'T') {
						level[newX][newY] = new Token("token", newX, newY);
					} else if (s.charAt(newX) == 'U') {
						level[newX][newY] = new TokenDoor("token door", newX, newY);
					} else if (s.charAt(newX) == 'S') {
							level[newX][newY] = new Teleporter("teleporter", newX, newY);
					 //Add new Cells here, new Cells created through this
					 // A redKey, B bluedoor, C bluekey, D greendoor, E greenkey, F fire, G goal, H Boots, I Flipper, R redDoor,
						//T Token, U Token Door, W Water,   Cell , #  Wall, S teleporter
						} else if (s.charAt(newX) == ' ') {
						level[newX][newY] = new Cell("Cell", newX, newY);

					}
				}
			}
			
			ArrayList<StraightLineEnemy> straightEnemy = new ArrayList<StraightLineEnemy>();
			ArrayList<DumbTargetingEnemy> dumbEnemy = new ArrayList<DumbTargetingEnemy>();
			ArrayList<Teleporter> teleporters = new ArrayList<Teleporter>();
			
			//enemies if exist
			while (in.hasNextLine()) {
				String target = in.next();
				if (target.equals("Straight")){
					straightEnemy.add(readStraight(in,level));
				} else if (target.equals("Dumb")) {
					dumbEnemy.add(readDumb(in,level));
				} else if (target.equals("Teleporter")) {
					teleporters.add(readTeleporter(in,file));
				}
				
			}
			
			Map map1 = new Map(size,start,level,
					straightEnemy,dumbEnemy);
			
			return map1;
			
			
			
			
		} catch (FileNotFoundException exception) {
			System.out.println("ERROR: Level File does not exist.");
			return null;
		}
	}
		
		public static Teleporter readTeleporter(Scanner in, String file) {
			
			int x = in.nextInt();
			int y = in.nextInt();
			int xLink = in.nextInt();
			int yLink = in.nextInt();
			
			
			Teleporter teleporter1 = new Teleporter("Teleporter",x,y,xLink,yLink,file);
			return teleporter1;
		}
		
		public static StraightLineEnemy readStraight(Scanner in, Cell[][] mapActual) {
			
			int[] info = new int[3];
			int x = in.nextInt();// get startX
			int y = in.nextInt();//get startY
			int z = in.nextInt();// get direction facing
			
			info[0] = x;
			info[1] = y;
			info[2] = z;
			
			StraightLineEnemy enemy = new StraightLineEnemy("Straight enemy", mapActual, info);
			return enemy;
		}
		
		public static DumbTargetingEnemy readDumb(Scanner in, Cell[][] mapActual) {
			
			int[] info = new int[3];
			int x = in.nextInt();// get startX
			int y = in.nextInt();//get startY
			
			info[0] = x;
			info[1] = y;
			
			DumbTargetingEnemy enemy = new DumbTargetingEnemy("Dumb", mapActual, info);
			return enemy;
		}
		
		
		
	
	
}




package application;


import java.io.File;
import java.util.ArrayList;

import javafx.scene.image.Image;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import moving.DumbTargetingEnemy;
import moving.Player;
import moving.StraightLineEnemy;
import moving.WallFollowingEnemy;

public class Map {
	Cell[][] mapActual;
	private int mapLength;
	private int mapHeight;
	private int start[];
	private Player player1;
	ArrayList<DumbTargetingEnemy> dumbList =new ArrayList<DumbTargetingEnemy>();
	ArrayList<StraightLineEnemy> straightList =new ArrayList<StraightLineEnemy>();
	//SmartTargetingEnemy[] SmartTargetingList;


	//ArrayList<WallFollowingEnemy> wallFollowList =new ArrayList<WallFollowingEnemy>(); //New

	public DumbTargetingEnemy getDummieAt(int num) {
		return dumbList.get(num);

	}

	// New
	//public WallFollowingEnemy getWallFollowAt(int num) {
	//	return wallFollowList.get(num);
	//}

	public Map (int[] size, int[] start, Cell[][] level,
			ArrayList<StraightLineEnemy> straightEnemy,
			ArrayList<DumbTargetingEnemy> dumbEnemy) {
		
		this.mapActual = level;
		this.mapHeight = size[1];
		this.mapLength = size[0];
		this.start = start;
		this.player1 = new Player("name", this.mapActual,this.start);
		this.dumbList = dumbEnemy;
		this.straightList = straightEnemy;
		
	}
	
	/*
	public Map () {
		this.mapActual=LevelLoader.loadLevel(file);
		this.start= LevelLoader.getPlayerStart(file);
		int size[] = LevelLoader.getSize(file);
		int count=0;
		//Swaps for some reason
		this.mapHeight =size[1];
		this.mapLength = size[0];
		this.player1 = new Player("name",mapActual,LevelLoader.getPlayerStart(file));
		this.enemy1 = new StraightLineEnemy("Straight enemy", mapActual, LevelLoader.getStraightEnemy(file));
		this.dumbList.add(new DumbTargetingEnemy("Dumb",mapActual, LevelLoader.getDumbEnemy(file)));
		this.dumbList.get(0).setPlayerx(this.player1.getxLocation());
		this.dumbList.get(0).setPlayery(this.player1.getyLocation());
		//
		//System.out.println(dumbList.get(0).getXLocation());
		//System.out.println(dumbList.get(0).getYLocation());

		// NEW
		this.wallFollowList.add(new WallFollowingEnemy("Wall Enemy",mapActual, LevelLoader.getWallFollowingEnemy(file)));
		//System.out.println(wallFollowList.get(0).getXLocation());
		//System.out.println(wallFollowList.get(0).getYLocation());

	}
*/


	public void setMapActual(Cell[][] mapActual) {
		this.mapActual = mapActual;
	}

	public void addPlayer(Player player) {
		this.player1 = player;
	}


	public void removeCell (Map map, int xLocation, int yLocation) {
		mapActual[xLocation][yLocation]= null;

	}

	public void removeCell (int xLocation, int yLocation) {
		mapActual[xLocation][yLocation]= null;

	}
	public void replaceCell(int xLocation, int yLocation) {
		removeCell(xLocation,yLocation);
		addCell(xLocation,yLocation);
	}

	public void addCell(int xLocation, int yLocation) {
		this.mapActual[xLocation][yLocation] = new Cell("Cell", xLocation, yLocation);
	}


	public Cell[][] getMapActual() {
		return mapActual;
	}


	public int getMapLength() {
		return mapLength;
	}


	public int getMapHeight() {
		return mapHeight;
	}


	public int[] getStart() {
		return start;
	}
	public Cell getCell(int x, int y) {

		return mapActual[x][y] ;
	}


	public Player getPlayer1() {
		return player1;
	}


	//public StraightLineEnemy getEnemy1() {
	//	return enemy1;
	//}

	public void updateMap(int nextX, int nextY) {
		openDoor(nextX, nextY);


	}
	public void finalize() {
		System.out.println("Map deleted");
	}

	public void openDoor(int nextX, int nextY) {
		String cellName =this.getCell(nextX, nextY).getName();
		Cell nextCell = this.getCell(nextX, nextY);
		Player player = this.getPlayer1();
		
		
		if (cellName.equalsIgnoreCase("red door") && player.getRedKey() > 0) {
			nextCell.changePlayerPass();
			nextCell.changeEnemyPass();
			player.minusRedKey();
			
			Map.playDoorNoise();

			
		} else if (cellName.equalsIgnoreCase("green door") && player.getGreenKey() > 0) {
			nextCell.changePlayerPass();
			nextCell.changeEnemyPass();
			player.minusGreenKey();
			
			Map.playDoorNoise();

			
		} else if (cellName.equalsIgnoreCase("blue door") && player.getBlueKey() > 0) {
			nextCell.changePlayerPass();
			nextCell.changeEnemyPass();
			player.minusBlueKey();
			
			Map.playDoorNoise();

			
		} else if (cellName.equalsIgnoreCase("token door") && player.getTokens() == 2) {
			nextCell.changePlayerPass();
			nextCell.changeEnemyPass();
			player.takeTokens();
			
			Map.playDoorNoise();
			

		}

	}
	
	private static void playDoorNoise() {
		String musicFileLocation = "./src/jail_cell_door.mp3";     

		Media doorSound = new Media(new File(musicFileLocation).toURI().toString());
		MediaPlayer mediaPlayer = new MediaPlayer(doorSound);
		
		mediaPlayer.play();
	}
	
	public void doAction() {
		int playerXLocation = this.getPlayer1().getxLocation();
		int playerYLocation = this.getPlayer1().getyLocation();
		String cellName =this.getCell(playerXLocation, playerYLocation).getName();

		if (cellName.equalsIgnoreCase("red")) {
			this.replaceCell(playerXLocation, playerYLocation);
			this.getPlayer1().addRedKey();
		} else if (cellName.equalsIgnoreCase("blue")) {
			this.replaceCell(playerXLocation, playerYLocation);
			this.getPlayer1().addBlueKey();
		} else if (cellName.equalsIgnoreCase("green")) {
			this.replaceCell(playerXLocation, playerYLocation);
			this.getPlayer1().addGreenKey();
		} else if (cellName.equalsIgnoreCase("boots")) {
			this.replaceCell(playerXLocation, playerYLocation);
			this.getPlayer1().changeBoot();
		} else if (cellName.equalsIgnoreCase("flippers")) {
			this.replaceCell(playerXLocation, playerYLocation);
			this.getPlayer1().changeFlipper();
		} else if (cellName.equalsIgnoreCase("token")) {
			this.replaceCell(playerXLocation, playerYLocation);
			this.getPlayer1().addToken();
		} else if (cellName.equalsIgnoreCase("teleporter")) {
			this.getPlayer1().teleport();
		} else if (cellName.equalsIgnoreCase("red door")) {
			this.replaceCell(playerXLocation, playerYLocation);
		} else if (cellName.equalsIgnoreCase("blue door")) {
			this.replaceCell(playerXLocation, playerYLocation);
		} else if (cellName.equalsIgnoreCase("green door")) {
			this.replaceCell(playerXLocation, playerYLocation);
		}
	}
	//THIS WILL NEED CHANGING TO ACCOMODATE MORE ENEMIES
	//public void StraightLineMove() {
	//	if (enemy1.getFacing() == 'u' || enemy1.getFacing() == 'd') {
	//		enemy1.moveY(enemy1.getXLocation(), enemy1.getYLocation(), enemy1.getFacing());
	//	} else {
	//		enemy1.moveX(enemy1.getXLocation(), enemy1.getYLocation(), enemy1.getFacing());
	//	}
	//}

	public void DumbMove() {
		this.dumbList.get(0).setPlayerx(this.player1.getxLocation());
		this.dumbList.get(0).setPlayery(this.player1.getyLocation());
		dumbList.get(0).move();
	}

	// NEW
	//public void WallFollowMove() {
	//	if (wallFollowList.get(0).getFacing() == 'u' || wallFollowList.get(0).getFacing() == 'd') {
	//		wallFollowList.get(0).moveY(wallFollowList.get(0).getXLocation(), wallFollowList.get(0).getYLocation(), wallFollowList.get(0).getFacing());
	//	} else {
	//		wallFollowList.get(0).moveX(wallFollowList.get(0).getXLocation(), wallFollowList.get(0).getYLocation(), wallFollowList.get(0).getFacing());
	//	}

	//}
}


package application;

import java.io.File;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class Teleporter extends Cell {
	int linkX;
	int linkY;
	public Teleporter(String name,int xCoordinate, int yCoordinate,int xCoordinateLink, int yCoordinateLink, String file) {
		
		super(name, xCoordinate, yCoordinate);
		int info[] = {0,0,0,0};
		info[0] = xCoordinate;
		info[1] = yCoordinate;
		info[2] = xCoordinateLink;
		info[3] = yCoordinateLink;
		this.playerPass = true;
		this.enemyPass = false;
		//File fileA = new File("./src/teleporter.png");
		//Image image = new Image(fileA.toURI().toString());
		//super.cellView = new ImageView(image);
		//super.cellView.setFitHeight(CELL_SIZE);
		//super.cellView.setFitWidth(CELL_SIZE);
		//Weird behaviour can't this.LinkX/Y use this, as  Cell [][] cannot access this.linkX/Y as it's superclass
		if (info[0]==xCoordinate && info[1] == yCoordinate) {
			super.linkX = info[2];
			super.linkY = info[3];
			this.linkX = info [2];
			this.linkY = info[3];
		} else {
			super.linkX = info[0];
			super.linkY = info[1];
			this.linkX = info [0];
			this.linkY = info[1];
		}
		// TODO Auto-generated constructor stub
	}
	
	public Teleporter(String name,int xCoordinate, int yCoordinate) {
		
		super(name,xCoordinate,yCoordinate);
		
	}
	

}

package application;

import java.awt.TextField;

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import moving.Player;
import moving.StraightLineEnemy;
import moving.WallFollowingEnemy;
import moving.DumbTargetingEnemy;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;


public class Game /*extends Application*/ {
	private static final int WINDOW_WIDTH = 800;
	private static final int WINDOW_HEIGHT = 500;
	static String startFile = "test.txt";
	private Stage primaryStage;

	//public void start(Stage primaryStage) {
  public void start(String startFile) {
	  	Stage primaryStage = new Stage();
		BorderPane root = new BorderPane();
		root.setTop(makeHBox());
		GridPane grid = new GridPane();
		root.setCenter(grid);
		grid.setAlignment(Pos.CENTER);
		Scene scene = new Scene(root, WINDOW_WIDTH, WINDOW_HEIGHT);

		MapManager.sharedMapManager().setMap(LevelLoaderBetter.loadLevel(startFile));
		
		// Register an event handler for key presses
		scene.addEventFilter(KeyEvent.KEY_PRESSED, event -> processKeyEvent(event, grid));	
		drawGame(grid);
		try {
			primaryStage.setScene(scene);
			primaryStage.setTitle("E.S.C");
			primaryStage.show();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		System.out.println("Start method ended");
	}

	public HBox makeHBox() {
		HBox box = new HBox();
		Label label = new Label(startFile);
		box.getChildren().add(label);
		return box;

	}

	public GridPane drawGame( GridPane grid) {
		grid.getChildren().clear();
		Map map = MapManager.sharedMapManager().getMap();
		int scopeXmin;
		int scopeXmax;
		int scopeYmin;
		int scopeYmax;
		int width = map.getMapLength();

		int height = map.getMapHeight();
		int playerXLocation = map.getPlayer1().getxLocation();
		int playerYLocation = map.getPlayer1().getyLocation();
		//System.out.println(" My X is" + playerXLocation+ " My Y is" + playerYLocation);
		if (playerXLocation - 3 < 0) {
			scopeXmin = 0;
		} else {
			scopeXmin = playerXLocation - 3;
		}
		if (playerXLocation + 4 > width) {
			scopeXmax = width;
		} else {
			scopeXmax = playerXLocation + 4;
		}
		if (playerYLocation - 3 < 0) {
			scopeYmin = 0;
		} else {
			scopeYmin = playerYLocation - 3;
		}
		if (playerYLocation + 4 > height) {
			scopeYmax = height;
		} else {
			scopeYmax = playerYLocation + 4;
		}

		for (int newY = scopeYmin; newY<scopeYmax; newY++) {
			for (int NewX = scopeXmin; NewX<scopeXmax; NewX++) {
				grid.add(map.getCell(NewX, newY).getView(), NewX, newY);
			}
		}
		// Draw Grid using GridPane
		/*for (int y = 0; y < actualMap.getMapHeight(); y++) {
			for (int x = 0; x < actualMap.getMapLength(); x++) {
				// Add new types of cells here
				grid.add(actualMap.getCell(x, y).getView(), x, y);
			}
		}
		*/
		Player player = map.getPlayer1();
		StraightLineEnemy enemy1 = map.getEnemy1();
		DumbTargetingEnemy enemy2 = map.getDummieAt(0);
		
		WallFollowingEnemy enemy3 = map.getWallFollowAt(0);
		
		grid.add(player.getPlayerView(), player.getxLocation(), player.getyLocation());
		if (enemy1.getXLocation()<scopeXmax && enemy1.getXLocation()>scopeXmin) {
			if (enemy1.getYLocation()<scopeYmax && enemy1.getYLocation()>scopeYmin) {
				grid.add(enemy1.getEnemyView(), enemy1.getXLocation(), enemy1.getYLocation());
			}

		}
		if (map.getDummieAt(0).getXLocation()<scopeXmax && map.getDummieAt(0).getXLocation()>scopeXmin) {
			if (map.getDummieAt(0).getYLocation()<scopeYmax && map.getDummieAt(0).getYLocation()>scopeYmin) {
				grid.add(map.getDummieAt(0).getEnemyView(), map.getDummieAt(0).getXLocation(), map.getDummieAt(0).getYLocation());
			}

		}

		if (map.getWallFollowAt(0).getXLocation()<scopeXmax && map.getWallFollowAt(0).getXLocation()>scopeXmin) {
			if (map.getWallFollowAt(0).getYLocation()<scopeYmax && map.getWallFollowAt(0).getYLocation()>scopeYmin) {
				grid.add(map.getWallFollowAt(0).getEnemyView(), map.getWallFollowAt(0).getXLocation(), map.getWallFollowAt(0).getYLocation());
			}
			
		}
		
		return grid;
	}

	public void processKeyEvent(KeyEvent event, GridPane grid) {
		Map map = MapManager.sharedMapManager().getMap();
		int currentX = map.getPlayer1().getxLocation();
		int currentY = map.getPlayer1().getyLocation();
		switch (event.getCode()) {

		case RIGHT:
			// Right key was pressed. So move the player right by one cell.
			//openDoor(player, actualMap, player.getxLocation() + 1, player.getyLocation());
			map.openDoor(currentX+1, currentY);
			map.getPlayer1().moveRight();
			map.doAction();
			//player.moveRight();

			break;
		case LEFT:
			// Left key was pressed. So move the player left by one cell.
			//openDoor(player, actualMap, player.getxLocation() - 1, player.getyLocation());
			map.openDoor(currentX-1, currentY);
			map.getPlayer1().moveLeft();
			map.doAction();
			//player.moveLeft();

			break;
		case UP:
			// Up key was pressed. So move the player up by one cell.
			//openDoor(player, actualMap, player.getxLocation(), player.getyLocation() - 1);
			map.openDoor(currentX, currentY-1);
			map.getPlayer1().moveUp();
			map.doAction();
			//player.moveUp();

			break;
		case DOWN:
			// Down key was pressed. So move the player down by one cell.
			//openDoor(player, actualMap, player.getxLocation(), player.getyLocation() + 1);
			map.openDoor(currentX, currentY+1);
			map.getPlayer1().moveDown();
			map.doAction();
			//player.moveDown();

			break;

		default:
			// Do nothing
			break;
		}

		map.StraightLineMove();
		map.DumbMove();
		map.WallFollowMove();
		loseGame(grid);

		event.consume();
	}

	public void loseGame ( GridPane grid) {
		Map map = MapManager.sharedMapManager().getMap();
		int playerXLocation = map.getPlayer1().getxLocation();
		int playerYLocation = map.getPlayer1().getyLocation();
		int StraightEnemyX = map.getEnemy1().getXLocation();
		int StraightEnemyY = map.getEnemy1().getYLocation();
		int DumbEnemyX = map.getDummieAt(0).getXLocation();
		int DumbEnemyY = map.getDummieAt(0).getYLocation();
		int WallFollowX = map.getWallFollowAt(0).getXLocation();
		int WallFollowY = map.getWallFollowAt(0).getYLocation();
		if (playerXLocation== StraightEnemyX && playerYLocation == StraightEnemyY) {

			System.out.println("Game OVer");
			restart();
		} else if (playerXLocation== StraightEnemyX && playerYLocation == StraightEnemyY) {
			System.out.println("Game OVer");
			restart();
		} else if (playerXLocation== DumbEnemyX && playerYLocation == DumbEnemyY) {
			System.out.println("Game OVer");
			restart();
		} else if (playerXLocation== WallFollowX && playerYLocation == WallFollowY) {
			System.out.println("Game OVer");
			restart();
		} else if (map.getCell(playerXLocation, playerYLocation).getName().equalsIgnoreCase("fire") && map.getPlayer1().getBoots()==false) {
			System.out.println("Game OVer");
			restart();
		} else if (map.getCell(playerXLocation, playerYLocation).getName().equalsIgnoreCase("water")&& map.getPlayer1().getFlippers()==false) {
			System.out.println("Game OVer");
			restart();
		}

		drawGame(grid);

	}
	public void restart() {
		Map newMap = new Map(startFile);
		MapManager.sharedMapManager().setMap(newMap);
	}

}


